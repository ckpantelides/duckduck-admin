{"version":3,"sources":["Components/Home.js","Components/Secret.js","Components/Login.jsx","App.js","serviceWorker.js","index.js"],"names":["Home","state","message","fetch","then","res","text","setState","this","Component","Secret","Login","props","handleInputChange","event","target","value","name","onSubmit","preventDefault","method","body","JSON","stringify","headers","status","Error","error","history","push","catch","err","console","alert","email","password","type","placeholder","onChange","required","App","to","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+QAEqBA,E,kDACnB,aAAe,IAAD,8BACZ,gBAEKC,MAAQ,CACXC,QAAS,cAJC,E,gEAOO,IAAD,OAElBC,MAAM,oDACHC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACC,GAAD,OAAS,EAAKE,SAAS,CAAEL,QAASG,S,+BAG1C,OACE,6BACE,oCACA,2BAAIG,KAAKP,MAAMC,c,GAlBWO,aCAbC,E,kDACnB,aAAe,IAAD,8BACZ,gBAEKT,MAAQ,CACXC,QAAS,cAJC,E,gEAOO,IAAD,OAElBC,MAAM,sDACHC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACC,GAAD,OAAS,EAAKE,SAAS,CAAEL,QAASG,S,+BAG1C,OACE,6BACE,sCACA,2BAAIG,KAAKP,MAAMC,c,GAlBaO,a,QCAfE,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAORC,kBAAoB,SAACC,GAAW,IAAD,EACLA,EAAMC,OAAtBC,EADqB,EACrBA,MAAOC,EADc,EACdA,KACf,EAAKV,SAAL,eACGU,EAAOD,KAXO,EAenBE,SAAW,SAACJ,GACVA,EAAMK,iBACNhB,MAAM,2DAA4D,CAChEiB,OAAQ,OACRC,KAAMC,KAAKC,UAAU,EAAKtB,OAC1BuB,QAAS,CACP,eAAgB,sBAGnBpB,MAAK,SAAAC,GACJ,GAAmB,MAAfA,EAAIoB,OAIN,MADc,IAAIC,MAAMrB,EAAIsB,OAF5B,EAAKf,MAAMgB,QAAQC,KAAK,cAM3BC,OAAM,SAAAC,GACLC,QAAQL,MAAMI,GACdE,MAAM,yCAhCR,EAAKhC,MAAQ,CACXiC,MAAQ,GACRC,SAAU,IAJK,E,qDAuCjB,OACE,0BAAMjB,SAAUV,KAAKU,UACnB,4CACA,2BACEkB,KAAK,QACLnB,KAAK,QACLoB,YAAY,cACZrB,MAAOR,KAAKP,MAAMiC,MAClBI,SAAU9B,KAAKK,kBACf0B,UAAQ,IAEV,2BACEH,KAAK,WACLnB,KAAK,WACLoB,YAAY,iBACZrB,MAAOR,KAAKP,MAAMkC,SAClBG,SAAU9B,KAAKK,kBACf0B,UAAQ,IAEX,2BAAOH,KAAK,SAASpB,MAAM,gB,GA3DCP,aCId+B,E,uKAEjB,OACE,kBAAC,IAAD,KACE,6BACE,4BACE,4BACE,kBAAC,IAAD,CAAMC,GAAG,KAAT,SAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,WAAT,WAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,UAAT,WAGJ,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAW5C,IACjC,kBAAC,IAAD,CAAO0C,KAAK,UAAUE,UAAWlC,IACjC,kBAAC,IAAD,CAAOgC,KAAK,SAASE,UAAWjC,W,GAnBXF,aCMboC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrD,MAAK,SAAAsD,GACJA,EAAaC,gBAEd7B,OAAM,SAAAH,GACLK,QAAQL,MAAMA,EAAMzB,c","file":"static/js/main.11e01f36.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport default class Home extends Component {\r\n  constructor() {\r\n    super();\r\n    //Set default message\r\n    this.state = {\r\n      message: 'Loading...',\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    //GET message from server using fetch api\r\n    fetch('https://storybook-backend.herokuapp.com/api/home')\r\n      .then((res) => res.text())\r\n      .then((res) => this.setState({ message: res }));\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Home</h1>\r\n        <p>{this.state.message}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nexport default class Secret extends Component {\r\n  constructor() {\r\n    super();\r\n    //Set default message\r\n    this.state = {\r\n      message: 'Loading...',\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    //GET message from server using fetch api\r\n    fetch('https://storybook-backend.herokuapp.com/api/secret')\r\n      .then((res) => res.text())\r\n      .then((res) => this.setState({ message: res }));\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Secret</h1>\r\n        <p>{this.state.message}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nexport default class Login extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      email : '',\r\n      password: ''\r\n    };\r\n  }\r\n\r\n  handleInputChange = (event) => {\r\n    const { value, name } = event.target;\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  }\r\n\r\n  onSubmit = (event) => {\r\n    event.preventDefault();\r\n    fetch('https://storybook-backend.herokuapp.com/api/authenticate', {\r\n      method: 'POST',\r\n      body: JSON.stringify(this.state),\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    })\r\n    .then(res => {\r\n      if (res.status === 200) {\r\n        this.props.history.push('/secret');\r\n      } else {\r\n        const error = new Error(res.error);\r\n        throw error;\r\n      }\r\n    })\r\n    .catch(err => {\r\n      console.error(err);\r\n      alert('Error logging in please try again');\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.onSubmit}>\r\n        <h1>Login Below!</h1>\r\n        <input\r\n          type=\"email\"\r\n          name=\"email\"\r\n          placeholder=\"Enter email\"\r\n          value={this.state.email}\r\n          onChange={this.handleInputChange}\r\n          required\r\n        />\r\n        <input\r\n          type=\"password\"\r\n          name=\"password\"\r\n          placeholder=\"Enter password\"\r\n          value={this.state.password}\r\n          onChange={this.handleInputChange}\r\n          required\r\n        />\r\n       <input type=\"submit\" value=\"Submit\"/>\r\n      </form>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Link, Route, Switch } from 'react-router-dom';\nimport Home from './Components/Home';\nimport Secret from './Components/Secret';\nimport Login from './Components/Login';\n\nexport default class App extends Component {\n  render() {\n    return (\n      <Router>\n        <div>\n          <ul>\n            <li>\n              <Link to='/'>Home</Link>\n            </li>\n            <li>\n              <Link to='/secret'>Secret</Link>\n            </li>\n            <li>\n              <Link to='/login'>Login</Link>\n            </li>\n          </ul>\n          <Switch>\n            <Route path='/' exact component={Home} />\n            <Route path='/secret' component={Secret} />\n            <Route path=\"/login\" component={Login} />\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}