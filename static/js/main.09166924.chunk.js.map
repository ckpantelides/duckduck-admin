{"version":3,"sources":["Components/Home.js","Components/Secret.js","Components/Login.jsx","Components/withAuth.jsx","Components/Orders.js","Components/Logout.jsx","App.js","serviceWorker.js","index.js"],"names":["Home","state","message","fetch","method","credentials","then","res","text","setState","this","Component","Secret","Login","props","handleInputChange","event","target","value","name","onSubmit","preventDefault","body","JSON","stringify","headers","status","Error","error","history","push","catch","err","console","alert","email","password","type","placeholder","onChange","required","withAuth","ComponentToProtect","loading","redirect","to","Orders","useState","data","setData","isLoading","setIsLoading","useEffect","axios","get","json","SortableEnquiry","SortableElement","readEnquiry","deleteEnquiry","SortableEnquiryContainer","SortableContainer","items","className","map","index","key","rowid","updatedData","read","filteredData","filter","id","onClick","post","src","alt","axis","onSortEnd","oldIndex","newIndex","arrayMove","onSortStart","_","pressDelay","Logout","logout","App","basename","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.09166924.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport default class Home extends Component {\r\n  constructor() {\r\n    super();\r\n    //Set default message\r\n    this.state = {\r\n      message: 'Loading...',\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    //GET message from server using fetch api\r\n    fetch('https://storybook-backend.herokuapp.com/api/home', {\r\n      method: 'GET',\r\n      credentials: 'include'\r\n    })\r\n      .then((res) => res.text())\r\n      .then((res) => this.setState({ message: res }));\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Home</h1>\r\n        <p>{this.state.message}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nexport default class Secret extends Component {\r\n  constructor() {\r\n    super();\r\n    //Set default message\r\n    this.state = {\r\n      message: 'Loading...',\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    //GET message from server using fetch api\r\n    fetch('https://storybook-backend.herokuapp.com/api/secret', {\r\n      credentials: 'include'\r\n    })\r\n      .then((res) => res.text())\r\n      .then((res) => this.setState({ message: res }));\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Secret</h1>\r\n        <p>{this.state.message}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nexport default class Login extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      email : '',\r\n      password: ''\r\n    };\r\n  }\r\n\r\n  handleInputChange = (event) => {\r\n    const { value, name } = event.target;\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  }\r\n\r\n  onSubmit = (event) => {\r\n    event.preventDefault();\r\n    fetch('https://storybook-backend.herokuapp.com/api/authenticate', {\r\n      method: 'POST',\r\n      credentials: 'include',\r\n      body: JSON.stringify(this.state),\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    })\r\n    .then(res => {\r\n      if (res.status === 200) {\r\n        this.props.history.push('/secret');\r\n      } else {\r\n        const error = new Error(res.error);\r\n        throw error;\r\n      }\r\n    })\r\n    .catch(err => {\r\n      console.error(err);\r\n      alert('Error logging in please try again');\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.onSubmit}>\r\n        <h1>Login</h1>\r\n        <input\r\n          type=\"email\"\r\n          name=\"email\"\r\n          placeholder=\"Enter email\"\r\n          value={this.state.email}\r\n          onChange={this.handleInputChange}\r\n          required\r\n        /><br></br>\r\n        <input\r\n          type=\"password\"\r\n          name=\"password\"\r\n          placeholder=\"Enter password\"\r\n          value={this.state.password}\r\n          onChange={this.handleInputChange}\r\n          required\r\n        /><br></br>\r\n       <input type=\"submit\" value=\"Submit\"/>\r\n      </form>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nexport default function withAuth(ComponentToProtect) {\r\n  return class extends Component {\r\n    constructor() {\r\n      super();\r\n      this.state = {\r\n        loading: true,\r\n        redirect: false,\r\n      };\r\n    }\r\n\r\n    componentDidMount() {\r\n      fetch('https://storybook-backend.herokuapp.com/api/checkToken', {\r\n        credentials: 'include'\r\n      })\r\n        .then(res => {\r\n          if (res.status === 200) {\r\n            this.setState({ loading: false });\r\n          } else {\r\n            const error = new Error(res.error);\r\n            throw error;\r\n          }\r\n        })\r\n        .catch(err => {\r\n          console.error(err);\r\n          this.setState({ loading: false, redirect: true });\r\n        });\r\n    }\r\n    render() {\r\n      const { loading, redirect } = this.state;\r\n      if (loading) {\r\n        return null;\r\n      }\r\n      if (redirect) {\r\n        return <Redirect to=\"/login\" />;\r\n      }\r\n      return <ComponentToProtect {...this.props} />;\r\n    }\r\n  }\r\n}","import { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nimport React from 'react';\r\nimport { SortableContainer, SortableElement } from 'react-sortable-hoc';\r\nimport arrayMove from 'array-move';\r\n\r\nconst Orders = () => {\r\n  const url = 'https://desert-point-server.herokuapp.com/enquiries';\r\n  // setData will update data variable using useState\r\n  const [data, setData] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  // retrieve enquiries from backend, assign to data variable\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    axios.get(url).then(json => {\r\n      setData(json.data);\r\n      setIsLoading(false);\r\n    });\r\n  }, []);\r\n\r\n  // function to mark enquiries as \"read\". All enquiries are initially set as read:\"false\".\r\n  // This function creates a copy of the data retrieved from the database. When the rowid matches\r\n  // the rowid of the data, read is marked as \"true\"\r\n  function readEnquiry(rowid) {\r\n    const updatedData = data.map(data =>\r\n      // read: \"true\" rather than true as sqlite does not accept booleans\r\n      // this can now be changed to boolean as postgressql accepts booleans\r\n      data.rowid === rowid ? { ...data, read: 'true' } : data\r\n    );\r\n    setData(updatedData);\r\n  }\r\n\r\n  // function to delete an enquiry. It returns all the enquiries except\r\n  // for the enquiry with the rowid selected by the user\r\n  function deleteEnquiry(rowid) {\r\n    const filteredData = data.filter(data => data.rowid !== rowid);\r\n    setData(filteredData);\r\n  }\r\n\r\n  // function to send any changes to the enquiries to the backend\r\n  function saveChanges() {\r\n    axios.post(`https://desert-point-server.herokuapp.com/update-enquiries`, {\r\n      data\r\n    });\r\n  }\r\n\r\n  // SortableEnquiry inherits the features of SortableElement from react-sortable-hoc,\r\n  // allowing it to be dragged and dropped. It displays each enquiry and has 2 buttons\r\n  // to mark as read and to delete the enquiry\r\n  const SortableEnquiry = SortableElement(\r\n    ({ value, readEnquiry, deleteEnquiry }) => (\r\n      // currently === \"true\" not true as sqlite does not accept boolean\r\n      // when an item is marked as \"read\", it will change color\r\n      <div className={`enquiry-card${value.read === 'true' ? ' read' : ''}`}>\r\n        <div className='enquiryButtonWrapper'>\r\n          <button className='enquiryButton' type='button' onClick={readEnquiry}>\r\n            <img src='images/tick.png' className='buttonIcon' alt='tick' />\r\n          </button>\r\n          <button\r\n            className='enquiryButton'\r\n            type='button'\r\n            onClick={deleteEnquiry}\r\n          >\r\n            <img src='images/bin.png' className='buttonIcon' alt='bin' />\r\n          </button>\r\n        </div>\r\n        <p className='enquiry-header'>Enquiry date: {value.enquirydate}</p>\r\n        <hr></hr>\r\n        <p>{value.name}</p>\r\n        <p>{value.email}</p>\r\n        <p>{value.telephone}</p>\r\n        <p>{value.dates}</p>\r\n        <p>{value.package}</p>\r\n        <hr></hr>\r\n        <p className='enquiry-footer'>Message:</p>\r\n        <p>{value.message}</p>\r\n      </div>\r\n    )\r\n  );\r\n\r\n  // SortableEnquiryContainer will hold the SortableEnquiries, allowing them to\r\n  // be dragged and dropped. It will map the enquiry data and pass it to each\r\n  // SortableEnqiury element\r\n  const SortableEnquiryContainer = SortableContainer(({ items }) => (\r\n    <div className='enquiry-card-container'>\r\n      {items.map((value, index) => (\r\n        <SortableEnquiry\r\n          key={value.rowid}\r\n          index={index}\r\n          value={value}\r\n          readEnquiry={() => readEnquiry(value.rowid)}\r\n          deleteEnquiry={() => deleteEnquiry(value.rowid)}\r\n        />\r\n      ))}\r\n    </div>\r\n  ));\r\n\r\n  // data elements will be updated with a new index once they've been moved\r\n  // this function will be passed to the SortableEnquiryContainer below\r\n  const onSortEnd = ({ oldIndex, newIndex }) =>\r\n    setData(arrayMove(data, oldIndex, newIndex));\r\n\r\n  return (\r\n    <div id='orders'>\r\n      <h1>Enquiries</h1>\r\n      <h4>\r\n        Drag enquiries to reorder them. Tick to mark as read. Bin to delete\r\n      </h4>\r\n      <button onClick={saveChanges} className='enquiry-save'>\r\n        {' '}\r\n        <img src='images/save.png' className='buttonIcon' alt='save' /> Save\r\n        changes\r\n      </button>\r\n      {isLoading ? (\r\n        <div className='typing_loader'></div>\r\n      ) : (\r\n        <SortableEnquiryContainer\r\n          axis='xy'\r\n          onSortEnd={onSortEnd}\r\n          items={data}\r\n          onSortStart={(_, event) => event.preventDefault()}\r\n          pressDelay='150'\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Orders;\r\n","import React, { Component } from 'react';\r\n//mport Cookies from 'universal-cookie';\r\n \r\n//const cookies = new Cookies();\r\n \r\n//cookies.set('myCat', 'Pacman', { path: '/' });\r\n// console.log(cookies.get('myCat'))\r\n\r\nexport default class Logout extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      email : '',\r\n      password: ''\r\n    };\r\n  }\r\n  // Cookie jar overflow. We can't access the HttpOnly cookie to delete it. Instead we can \r\n  // creae hundreds of new cookies to pop our cookie from the stack \r\n  logout = (event) => {\r\n   \r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Logout</h1>\r\n          <button onClick={this.logout}>Logout</button>\r\n        </div>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport { BrowserRouter as HashRouter, Router, Link, Route, Switch } from 'react-router-dom';\r\nimport Home from './Components/Home';\r\nimport Secret from './Components/Secret';\r\nimport Login from './Components/Login';\r\nimport withAuth from './Components/withAuth';\r\nimport Orders from './Components/Orders';\r\nimport Logout from './Components/Logout';\r\n\r\nimport './App.css';\r\n\r\nexport default class App extends Component {\r\n  render() {\r\n    return (  \r\n      <HashRouter basename='/'>\r\n        <div className='App'>\r\n         <ul className=\"nav\">\r\n            <li>\r\n              <Link to='/'>Home</Link>\r\n            </li>\r\n            <li>\r\n              <Link to='/secret'>Secret</Link>\r\n            </li>\r\n            <li>\r\n              <Link to='/login'>Login</Link>\r\n            </li>\r\n            <li>\r\n              <Link to='/orders'>Orders</Link>\r\n            </li>\r\n            <li>\r\n              <Link to='/logout'>Logout</Link>\r\n            </li>\r\n          </ul>\r\n          <Route path='/' exact component={Home} />\r\n            <Route path=\"/secret\" component={withAuth(Secret)} />\r\n            <Route path=\"/orders\" component={withAuth(Orders)}  />\r\n            <Route path=\"/login\" component={Login} />\r\n            <Route path=\"/logout\" component={Logout} />\r\n         </div>\r\n       </HashRouter>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}